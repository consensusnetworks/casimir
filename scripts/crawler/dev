#!/bin/bash
# Run a Casimir crawler
#
# Example:
#
#    scripts/crawler/dev -c chains -f fork-name -n network-name -upload whether-to-upload (network overrides fork)
#
# Further information:
# See https://docs.aws.amazon.com/cdk/api/v2/
#

# Configure and expose variables
source scripts/aws/configure

# Set RPC URL bases
ethereum_mainnet=https://eth-mainnet.g.alchemy.com/v2 
ethereum_testnet=https://eth-testnet.g.alchemy.com/v2

# Set the stage
export PUBLIC_STAGE=${STAGE}

# Get args
while getopts :c:f:n:u: flag
do
    case "${flag}" in
        c) chains=${OPTARG};;
        f) fork=${OPTARG};;
        n) network=${OPTARG};;
        u) upload=${OPTARG};;
    esac
done

# Default to ethereum if chains is not set or set vaguely
if [ -z "$chains" ] || [ "$chains" = true ]; then
    chains="ethereum"
fi

# Default to mainnet if fork is set vaguely
if [ "$fork" = true ]; then
    fork="mainnet"
fi

# Default to mainnet if network is not set or set vaguely
if [ -z "$network" ] || [ "$network" = true ]; then
    network="mainnet"
fi

# Default to true if upload is not set
if [ -z "$upload" ]; then
    upload="enabled"
fi


export CHAINS=$chains
export FORK=$fork
export NETWORK=$network
export UPLOAD=$upload

commands=("npm run dev --workspace @casimir/ethereum-transfers")

# Loop over comma-separated string of chains
IFS=',' read -r -a chain_list <<< "$chains"

for chain in "${chain_list[@]}"
do
    # Expose RPC URL directly if network is set to mainnet or testnet
    if [ -n "$network" ]; then
        # Get the RPC API key from AWS
        rpc_secret_id=consensus-networks-$chain-$network
        rpc_key=$(aws secretsmanager get-secret-value \
        --secret-id $rpc_secret_id \
        --query SecretString \
        --output text \
        --profile $profile)

        CHAIN=$(echo $chain | tr '[:lower:]' '[:upper:]')
        rpc_base=${chain}_${network}
        export "PUBLIC_${CHAIN}_URL"="${!rpc_base}/$rpc_key"
    else
        # Pass fork or network to chain-specific script
        commands+=("npm run dev:$chain --fork=$fork")
    fi
done

for command in "${commands[@]}"
do
    $command &
done

wait && pkill -P $$