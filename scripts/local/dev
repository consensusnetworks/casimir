#!/bin/bash
# Run a Casimir dev server
#
# Example:
#
#    scripts/local/dev -a app-name -m whether-to-mock-app-services (i.e. -a web -m true)
#
# Further information:
# See https://docs.aws.amazon.com/cdk/api/v2/
#

# Configure and expose variables
source scripts/aws/configure

# Set RPC URL bases
ethereum_mainnet=https://eth-mainnet.g.alchemy.com/v2 
ethereum_testnet=https://eth-testnet.g.alchemy.com/v2

# Set the stage
export PUBLIC_STAGE=${STAGE}

# Secret ID is just the name or ARN
seed_secret_id=consensus-networks-bip39-seed

# Get the secret from AWS
seed=$(aws secretsmanager get-secret-value \
--secret-id $seed_secret_id \
--query SecretString \
--output text \
--profile $profile)

# Set the shared bip39 seed
export BIP39_SEED="$seed"

# Get args
while getopts :a:f:m:n:s:t: flag
do
    case "${flag}" in
        a) app=${OPTARG};;
        f) fork=${OPTARG};;
        m) mock=${OPTARG};;
        n) network=${OPTARG};;
        s) speculos=${OPTARG};;
        t) tunnel=${OPTARG};;
    esac
done

# Default to mainnet if fork is set vaguely
if [ "$fork" = true ]; then
    fork=mainnet
fi

# Default to mainnet if network is set vaguely
if [ "$network" = true ]; then
    network=mainnet
fi

commands=()

if [ "$app" == "landing" ]; then
    # Default settings for landing page development
    chains=""
    services=""
else 
    # Default settings for web app development
    app="web"
    chains="ethereum"
    services="auth"

    # Loop over comma-separated string of chains
    IFS=',' read -r -a chain_list <<< "$chains"

    for chain in "${chain_list[@]}"
    do
        # Expose RPC URL directly if network is set to mainnet or testnet
        if [ -n "$network" ]; then
            # Get the RPC API key from AWS
            rpc_secret_id=consensus-networks-$chain-$network
            rpc_key=$(aws secretsmanager get-secret-value \
            --secret-id $rpc_secret_id \
            --query SecretString \
            --output text \
            --profile $profile)

            CHAIN=$(echo $chain | tr '[:lower:]' '[:upper:]')
            rpc_base=${chain}_${network}
            export "PUBLIC_${CHAIN}_RPC"="${!rpc_base}/$rpc_key"
        else
            # Pass fork or network to chain-specific script
            commands+=("npm run dev:$chain --fork=$fork")
        fi
    done

    # Set project-wide contracts for local (default) chain
    if [ -z "$network" ]; then
        export PUBLIC_SSV_ADDRESS="0x967ada0ed736fc6916dabe7f0193bab811c74f50"
        
        # Tunnel local (default) chain networks if specified
        if [ -n "$tunnel" ]; then
            export LOCAL_TUNNEL="$tunnel"
        fi
    fi
fi

commands+=("npm run dev --workspace @casimir/$app")

if [ -n "$mock" ]; then
    # Loop over comma-separated string of services
    IFS=',' read -r -a service_list <<< "$services"
    port=3999

    export PUBLIC_MOCK="$mock"

    for service in "${service_list[@]}"
    do
        SERVICE=$(echo $service | tr '[:lower:]' '[:upper:]')
        port=$(( port + 1 ))
        export PUBLIC_${SERVICE}_PORT=$port
    done

    commands+=("scripts/local/mock -d infrastructure/cdk -s $services")

fi

if [ -n "$speculos" ]; then

    # Close existing process if necessary
    if [ -n $(lsof -ti tcp:5001) ]; then
        kill -9 $(lsof -ti tcp:5001)
    fi

    export PUBLIC_SPECULOS_PORT="5001"
    export PUBLIC_SPECULOS_APP="ethereum"

    speculos_command="scripts/ledger/emulate"
    if [ "$speculos" != "true" ]; then
        speculos_command+="-a $speculos"
        export PUBLIC_SPECULOS_APP="$speculos"
    fi
    commands+=("$speculos_command")
    commands+=("npx esno scripts/ledger/proxy.ts")

fi

for command in "${commands[@]}"
do
    $command &
done

wait && pkill -P $$